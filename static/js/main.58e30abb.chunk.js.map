{"version":3,"sources":["redux/ColorReducer.jsx","components/AddColorForm.jsx","components/ColorList.jsx","App.js","serviceWorker.js","redux/index.js","index.js"],"names":["ADD_COLOR","initialValues","colors","actions","addColor","color","type","payload","Input","styled","MaskedInput","_templateObject","Button","button","_templateObject2","AddColorForm","state","event","this","setState","target","value","preventDefault","props","length","react_default","a","createElement","onSubmit","handleSubmit","bind","guide","mask","onChange","handleChange","React","Component","connect","dispatch","bindActionCreators","ListContainer","div","ColorList_templateObject","ColorRow","ColorList_templateObject2","_ref","DisplayColor","_templateObject3","_ref2","ColorList","store","map","key","PureComponent","PageWrapper","App_templateObject","Box","App_templateObject2","BoxHeader","App_templateObject3","BoxBody","_templateObject4","App","components_AddColorForm","components_ColorList","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","undefined","action","Object","objectSpread","concat","toConsumableArray","ReactDOM","render","es","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58e30abb.chunk.js","sourcesContent":["const ADD_COLOR = 'ADD_COLOR'\r\n\r\nconst initialValues = {\r\n  colors: ['#ffb12c', '#55b15b']\r\n}\r\n\r\nexport function reducer(state = initialValues, action) {\r\n  switch (action.type){\r\n    case ADD_COLOR:\r\n      return {\r\n        ...state,\r\n        colors: [ ...state.colors, action.payload]\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst addColor = (color) => ({ type: ADD_COLOR, payload: color })\r\n\r\nexport const actions = {\r\n  addColor\r\n}","import React from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { actions } from '../redux/ColorReducer'\r\nimport { connect } from 'react-redux'\r\nimport MaskedInput from 'react-text-mask'\r\nimport styled from 'styled-components'\r\n\r\nconst Input = styled(MaskedInput)`\r\n  border-radius: 4px 0 0 4px;\r\n  border: 1px solid #868686;\r\n  border-right: none;\r\n  padding: 5px 10px;\r\n  box-shadow: inset 0 0 3px rgba(0,0,0,0.2);\r\n  background: #f8f9fa;\r\n  height: 40px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n  padding: 5px 15px;\r\n  height: 40px;\r\n  border: 1px solid #868686;\r\n  cursor: pointer;\r\n  background: #2dc86e;\r\n  color: white;\r\n  font-weight: bold;\r\n  border-radius: 0 4px 4px 0;\r\n  transition: .1s ease;\r\n  \r\n  &:hover {\r\n    box-shadow: inset 0 1px 6px rgba(0,0,0,0.2);\r\n  }\r\n`;\r\n\r\nclass AddColorForm extends React.Component {\r\n  state = {\r\n    color: ''\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ color: event.target.value })\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault()\r\n    const { actions } = this.props\r\n\r\n    if (this.state.color.length < 4) {\r\n      return\r\n    }\r\n\r\n    actions.addColor(this.state.color)\r\n    this.setState({ color: '' })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit.bind(this)}>\r\n        <Input\r\n          type=\"text\"\r\n          value={this.state.color}\r\n          guide={false}\r\n          mask={[\r\n            '#',\r\n            /[0-9A-Fa-f]/,\r\n            /[0-9A-Fa-f]/,\r\n            /[0-9A-Fa-f]/,\r\n            /[0-9A-Fa-f]/,\r\n            /[0-9A-Fa-f]/,\r\n            /[0-9A-Fa-f]/\r\n          ]}\r\n          onChange={this.handleChange.bind(this)}\r\n        />\r\n        <Button>Add</Button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  (dispatch) => ({\r\n    actions: bindActionCreators(actions, dispatch)\r\n  })\r\n)(AddColorForm)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nconst ListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  align-items: stretch;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst ColorRow = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  font-size: 1.2rem;\r\n  padding: 15px;\r\n  border-bottom: 1px solid lightgray;\r\n  color: #696969;\r\n  \r\n  span {\r\n    position: relative;\r\n    \r\n    &:before {\r\n      content: \"\";\r\n      position: absolute;\r\n      width: 0;\r\n      height: 2px;\r\n      background: ${({ color }) => color ? color : '#696969'};\r\n      bottom: -2px;\r\n      transition: .4s ease;\r\n      \r\n    }\r\n    \r\n    &:hover {\r\n      &:before {\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n  \r\n  &:hover {\r\n    background: #f9f9f9;\r\n    span:before {\r\n        width: 100%;\r\n      }\r\n  }\r\n`;\r\n\r\nconst DisplayColor = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n  box-shadow: inset 0 1px 4px rgba(0,0,0,0.2);\r\n  border: 1px solid #868686;\r\n  border-radius: 4px;\r\n  margin-right: 15px;\r\n  background: ${({ color }) => color ? color : 'transparent'};\r\n`;\r\n\r\nclass ColorList extends React.PureComponent {\r\n  render() {\r\n    const { store } = this.props\r\n    const colors = store.colors\r\n\r\n    return (\r\n      <ListContainer>\r\n        {colors.map((color, key) => {\r\n          if (key < colors.length - 5) {\r\n            return null\r\n          }\r\n\r\n          return (\r\n            <ColorRow key={key} color={color}>\r\n              <DisplayColor color={color}/>\r\n              <span>{color}</span>\r\n            </ColorRow>\r\n          )\r\n        })}\r\n      </ListContainer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    store: state.store\r\n  })\r\n)(ColorList)\r\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport AddColorForm from './components/AddColorForm'\nimport ColorList from './components/ColorList'\n\nconst PageWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  background: #f9fafb;\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst Box = styled.div`\n  border: 1px solid lightgray;\n  background: white;\n  border-radius: 4px;\n  box-shadow: 0 2px 2px rgba(0,0,0,0.1);\n  overflow: hidden;\n`;\n\nconst BoxHeader = styled.div`\n  padding: 15px;\n  border-bottom: 1px solid lightgray;\n  background: #fcfcfc;\n  display: flex;\n  align-items: stretch;\n`;\n\nconst BoxBody = styled.div``;\n\nclass App extends Component {\n  render() {\n    return (\n      <PageWrapper>\n        <Box>\n          <BoxHeader>\n            <AddColorForm/>\n          </BoxHeader>\n          <BoxBody>\n            <ColorList/>\n          </BoxBody>\n        </Box>\n      </PageWrapper>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\r\nimport { reducer as store } from './ColorReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  store,\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducers from './redux'\n\nReactDOM.render(\n  <Provider store={createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())}>\n    <App />\n  </Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}